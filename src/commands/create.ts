import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ NEIRA –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
 */
export async function createApp(appName: string, options: { description?: string } = {}) {
  console.log(chalk.blue(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "${appName}"...`));

  const appDir = path.join(process.cwd(), appName);
  const templateDir = path.join(__dirname, 'basic-app');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (fs.existsSync(appDir)) {
    throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${appName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(templateDir)) {
    throw new Error(`–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templateDir}`);
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
  await fs.copy(templateDir, appDir);

  // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–∞–π–ª–∞—Ö
  const description = options.description || `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${appName} –¥–ª—è NEIRA`;
  const author = 'NEIRA Developer';

  await replaceInFile(path.join(appDir, 'package.json'), {
    '{{appName}}': appName,
    '{{description}}': description,
    '{{author}}': author
  });

  await replaceInFile(path.join(appDir, 'README.md'), {
    '{{appName}}': appName,
    '{{description}}': description,
    '{{author}}': author
  });

  await replaceInFile(path.join(appDir, 'src', 'index.ts'), {
    '{{appName}}': appName,
    '{{description}}': description,
    '{{author}}': author
  });

  console.log(chalk.green(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${appName}" —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!`));
  console.log(chalk.gray(''));
  console.log(chalk.blue('–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:'));
  console.log(chalk.gray(`  cd ${appName}`));
  console.log(chalk.gray(`  npm install`));
  console.log(chalk.gray(`  npm run dev`));
  console.log(chalk.gray(''));
  console.log(chalk.yellow('üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç neira-shared-types –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏'));
}

/**
 * –ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–∞–π–ª–µ
 */
async function replaceInFile(filePath: string, replacements: Record<string, string>) {
  if (!fs.existsSync(filePath)) {
    return;
  }

  let content = await fs.readFile(filePath, 'utf8');
  
  for (const [placeholder, value] of Object.entries(replacements)) {
    content = content.replace(new RegExp(placeholder, 'g'), value);
  }

  await fs.writeFile(filePath, content);
} 