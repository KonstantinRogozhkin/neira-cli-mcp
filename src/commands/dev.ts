import express from 'express';
import cors from 'cors';
import { WebSocketServer } from 'ws';
import { createServer } from 'http';
import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';

export async function devServer(port: number = 4242) {
  console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ NEIRA MCP Server...'));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ neira-app.json
  const manifestPath = path.join(process.cwd(), 'neira-app.json');
  if (!fs.existsSync(manifestPath)) {
    console.log(chalk.yellow('‚ö†Ô∏è  neira-app.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'));
    console.log(chalk.gray('   –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é: neira-cli-mcp create <app-name>'));
  }

  const app = express();
  const server = createServer(app);
  const wss = new WebSocketServer({ server });

  // Middleware
  app.use(cors());
  app.use(express.json());

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use((req, res, next) => {
    console.log(chalk.gray(`${req.method} ${req.path}`));
    next();
  });

  // API Routes
  app.get('/api/v1/health', (req, res) => {
    res.json({ status: 'ok', server: 'neira-mcp-dev', version: '0.2.0' });
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  app.get('/api/v1/context', (req, res) => {
    let manifest = null;
    try {
      if (fs.existsSync(manifestPath)) {
        manifest = fs.readJsonSync(manifestPath);
      }
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è neira-app.json:'), error);
    }

    res.json({
      manifest,
      messages: [
        {
          role: 'system',
          content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NEIRA MCP Dev Server! –≠—Ç–æ –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–Ω—Ç–∞–π–º–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.'
        }
      ],
      settings: {
        model: 'gpt-4',
        temperature: 0.7
      }
    });
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è chat completions)
  app.post('/api/v1/chat/completions', (req, res) => {
    const { messages, stream = false } = req.body;
    
    if (stream) {
      // –î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ WebSocket
      res.json({ 
        message: '–î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebSocket /api/v1/stream',
        websocket_url: `ws://localhost:${port}/api/v1/stream`
      });
    } else {
      // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      res.json({
        id: 'dev-response-' + Date.now(),
        object: 'chat.completion',
        created: Math.floor(Date.now() / 1000),
        model: 'neira-dev-model',
        choices: [{
          index: 0,
          message: {
            role: 'assistant',
            content: `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç NEIRA MCP Dev Server. –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages?.length || 0}`
          },
          finish_reason: 'stop'
        }]
      });
    }
  });

  // WebSocket –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
  wss.on('connection', (ws) => {
    console.log(chalk.green('üì° WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'));

    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        console.log(chalk.blue('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:'), message);

        // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞
        const response = {
          id: 'dev-stream-' + Date.now(),
          object: 'chat.completion.chunk',
          created: Math.floor(Date.now() / 1000),
          model: 'neira-dev-model',
          choices: [{
            index: 0,
            delta: {
              role: 'assistant',
              content: '–≠—Ç–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç NEIRA MCP Dev Server! '
            },
            finish_reason: null
          }]
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏
        ws.send(JSON.stringify(response));
        
        setTimeout(() => {
          const finalResponse = {
            ...response,
            choices: [{
              index: 0,
              delta: {},
              finish_reason: 'stop'
            }]
          };
          ws.send(JSON.stringify(finalResponse));
        }, 1000);

      } catch (error) {
        console.error(chalk.red('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:'), error);
        ws.send(JSON.stringify({ error: 'Invalid message format' }));
      }
    });

    ws.on('close', () => {
      console.log(chalk.yellow('üì° WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'));
    });
  });

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  server.listen(port, () => {
    console.log(chalk.green(`‚úÖ NEIRA MCP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`));
    console.log(chalk.gray('   API endpoints:'));
    console.log(chalk.gray(`   ‚Ä¢ GET  /api/v1/health`));
    console.log(chalk.gray(`   ‚Ä¢ GET  /api/v1/context`));
    console.log(chalk.gray(`   ‚Ä¢ POST /api/v1/chat/completions`));
    console.log(chalk.gray(`   ‚Ä¢ WS   /api/v1/stream`));
    console.log(chalk.gray(''));
    console.log(chalk.blue('üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ neira-app.json...'));
    console.log(chalk.gray('   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'));

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ neira-app.json
    if (fs.existsSync(manifestPath)) {
      fs.watchFile(manifestPath, (curr, prev) => {
        console.log(chalk.blue('üìù neira-app.json –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...'));
      });
    }
  });

  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log(chalk.yellow('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...'));
    server.close(() => {
      console.log(chalk.green('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
      process.exit(0);
    });
  });
} 