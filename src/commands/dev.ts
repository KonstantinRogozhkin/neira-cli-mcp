import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';
import { z } from 'zod';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ NEIRA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
interface NeiraAppManifest {
  name?: string;
  version?: string;
  description?: string;
  [key: string]: unknown;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç MCP dev —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ NEIRA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 */
export async function devServer() {
  console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ NEIRA MCP Server...'));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ neira-app.json
  const manifestPath = path.join(process.cwd(), 'neira-app.json');
  let manifest: NeiraAppManifest | null = null;
  
  if (fs.existsSync(manifestPath)) {
    try {
      manifest = await fs.readJson(manifestPath) as NeiraAppManifest;
      console.log(chalk.green(`‚úÖ –ù–∞–π–¥–µ–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç: ${manifest.name} v${manifest.version}`));
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è neira-app.json:', error));
    }
  } else {
    console.log(chalk.yellow('‚ö†Ô∏è  neira-app.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'));
    console.log(chalk.gray('   –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é: neira-cli-mcp create <app-name>'));
  }

  // –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
  const server = new McpServer({
    name: manifest?.name || 'neira-dev-server',
    version: manifest?.version || '0.1.0'
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  server.registerTool(
    'get_app_info',
    {
      title: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º NEIRA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      inputSchema: {}
    },
    async () => {
      if (manifest) {
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(manifest, null, 2)
          }]
        };
      } else {
        return {
          content: [{
            type: 'text',
            text: '–ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ neira-app.json –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É create.'
          }]
        };
      }
    }
  );

  // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  server.registerTool(
    'validate_app',
    {
      title: '–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã NEIRA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      inputSchema: {}
    },
    async () => {
      const errors: string[] = [];
      const warnings: string[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
      if (!manifest) {
        errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç neira-app.json');
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!manifest.name) errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "name"');
        if (!manifest.version) errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "version"');
        if (!manifest.description) warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
      const srcPath = path.join(process.cwd(), 'src');
      if (!fs.existsSync(srcPath)) {
        warnings.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ src/');
      }

      const result = {
        valid: errors.length === 0,
        errors,
        warnings
      };

      return {
        content: [{
          type: 'text',
          text: JSON.stringify(result, null, 2)
        }]
      };
    }
  );

  // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
  server.registerTool(
    'list_project_files',
    {
      title: '–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ',
      inputSchema: {
        pattern: z.string().optional().describe('–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "*.ts")')
      }
    },
    async ({ pattern }) => {
      try {
        const glob = await import('fast-glob');
        const files = await glob.default(pattern || '**/*', {
          cwd: process.cwd(),
          ignore: ['node_modules/**', 'dist/**', '.git/**'],
          onlyFiles: true
        });

        return {
          content: [{
            type: 'text',
            text: `–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}\n\n${files.join('\n')}`
          }]
        };
      } catch (error) {
        return {
          content: [{
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${error}`
          }],
          isError: true
        };
      }
    }
  );

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
  server.registerResource(
    'project_info',
    'neira://project/info',
    {
      title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ',
      description: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º NEIRA –ø—Ä–æ–µ–∫—Ç–µ',
      mimeType: 'application/json'
    },
    async () => {
      const projectInfo = {
        name: manifest?.name || 'Unknown',
        version: manifest?.version || '0.0.0',
        description: manifest?.description || 'NEIRA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        hasManifest: !!manifest,
        workingDirectory: process.cwd(),
        nodeVersion: process.version,
        timestamp: new Date().toISOString()
      };

      return {
        contents: [{
          uri: 'neira://project/info',
          text: JSON.stringify(projectInfo, null, 2),
          mimeType: 'application/json'
        }]
      };
    }
  );

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ stdio transport
  const transport = new StdioServerTransport();
  
  try {
    await server.connect(transport);
    
    console.log(chalk.green('‚úÖ NEIRA MCP Server –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!'));
    console.log(chalk.gray(''));
    console.log(chalk.blue('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:'));
    console.log(chalk.gray('   ‚Ä¢ get_app_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏'));
    console.log(chalk.gray('   ‚Ä¢ validate_app - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'));
    console.log(chalk.gray('   ‚Ä¢ list_project_files - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞'));
    console.log(chalk.gray(''));
    console.log(chalk.blue('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:'));
    console.log(chalk.gray('   ‚Ä¢ neira://project/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ'));
    console.log(chalk.gray(''));
    console.log(chalk.yellow('üí° –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –∫ Claude Desktop –∏–ª–∏ –¥—Ä—É–≥–æ–º—É MCP –∫–ª–∏–µ–Ω—Ç—É'));
    console.log(chalk.gray('   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'));

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ neira-app.json
    if (fs.existsSync(manifestPath)) {
      fs.watchFile(manifestPath, async (curr, prev) => {
        console.log(chalk.blue('üìù neira-app.json –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...'));
        try {
          manifest = await fs.readJson(manifestPath) as NeiraAppManifest;
          console.log(chalk.green('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞'));
        } catch (error) {
          console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:', error));
        }
      });
    }

  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:'), error);
    process.exit(1);
  }

  // Graceful shutdown
  process.on('SIGINT', () => {
    console.log(chalk.yellow('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...'));
    fs.unwatchFile(manifestPath);
    console.log(chalk.green('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
    process.exit(0);
  });
} 