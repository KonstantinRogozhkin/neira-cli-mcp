import { promises as fs, existsSync } from 'fs';
import path from 'path';
import chalk from 'chalk';
import { spawn } from 'child_process';

/**
 * –ü—Ä–æ—Ñ–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞
 */
export const EXPORT_PROFILES = {
  general: '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–æ–≤',
  docs: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (README —Ñ–∞–π–ª—ã, docs –ø–∞–ø–∫–∏)',
  build: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏ –∏ CI',
  tests: '–¢–µ—Å—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã',
  all: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π –¥–∞–º–ø'
} as const;

export type ExportProfile = keyof typeof EXPORT_PROFILES;

/**
 * –û–±—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å code2prompt v3.x)
 */
const COMMON_EXCLUDES = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
  'node_modules',
  'dist',
  'build',
  'out',
  'coverage',
  '.git',
  '.next',
  '.turbo',
  '.cache',
  'logs',
  'tmp',
  'temp'
];

/**
 * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª .exportignore –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 */
async function readExportIgnore(projectRoot: string): Promise<string[]> {
  const exportIgnorePath = path.join(projectRoot, '.exportignore');
  
  try {
    const content = await fs.readFile(exportIgnorePath, 'utf-8');
    const patterns = content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#')); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    
    if (patterns.length > 0) {
      console.log(chalk.gray(`üìã –ù–∞–π–¥–µ–Ω .exportignore —Å ${patterns.length} –ø—Ä–∞–≤–∏–ª–∞–º–∏`));
    }
    
    return patterns;
  } catch (error) {
    // –§–∞–π–ª .exportignore –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    return [];
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—É code2prompt
 */
function getCode2PromptCommand(): string {
  const isWindows = process.platform === 'win32';
  const binName = isWindows ? 'code2prompt.cmd' : 'code2prompt';
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
  const localPath = path.join(process.cwd(), 'node_modules', '.bin', binName);
  if (existsSync(localPath)) {
    return localPath;
  }
  
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ code2prompt —á–µ—Ä–µ–∑ require.resolve (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
  try {
    const code2promptModule = require.resolve('code2prompt');
    const moduleRoot = path.dirname(code2promptModule);
    
    // –ò—â–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    const possibleBinPaths = [
      path.join(moduleRoot, '..', '.bin', binName),
      path.join(moduleRoot, '..', '..', '.bin', binName),
      path.join(moduleRoot, 'bin', 'code2prompt.js'), // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    ];
    
    for (const binPath of possibleBinPaths) {
      if (existsSync(binPath)) {
        return binPath;
      }
    }
    
    // –ï—Å–ª–∏ .bin –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é –¥–ª—è npx
    return `npx code2prompt`;
  } catch (error) {
    // code2prompt –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ require.resolve
  }
  
  // Fallback –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
  return binName;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ code2prompt
 */
async function checkCode2Prompt(): Promise<boolean> {
  return new Promise((resolve) => {
    console.log(chalk.gray('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è code2prompt...'));
    
    const command = getCode2PromptCommand();
    const child = spawn(command, ['--version'], { 
      stdio: 'pipe',
      shell: true 
    });
    
    let stdout = '';
    let stderr = '';
    
    child.stdout.on('data', (data) => {
      stdout += data.toString();
    });
    
    child.stderr.on('data', (data) => {
      stderr += data.toString();
    });
    
    child.on('close', (code) => {
      if (code === 0) {
        console.log(chalk.green(`‚úÖ code2prompt –Ω–∞–π–¥–µ–Ω: ${stdout.trim()}`));
        resolve(true);
      } else {
        console.log(chalk.red(`‚ùå code2prompt –Ω–µ –Ω–∞–π–¥–µ–Ω (–∫–æ–¥: ${code})`));
        if (stderr) {
          console.log(chalk.gray(`–û—à–∏–±–∫–∞: ${stderr.trim()}`));
        }
        resolve(false);
      }
    });
    
    child.on('error', (error) => {
      console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ code2prompt: ${error.message}`));
      resolve(false);
    });
  });
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–µ–Ω—å –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∏—â–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤)
 */
async function findMonorepoRoot(): Promise<string | null> {
  let currentDir = process.cwd();
  const startDir = currentDir;
  let levelsUp = 0;
  const maxLevels = 2; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ 2 —É—Ä–æ–≤–Ω—è–º–∏ –≤–≤–µ—Ä—Ö
  
  while (currentDir !== path.parse(currentDir).root && levelsUp < maxLevels) {
    try {
      const files = await fs.readdir(currentDir);
      
      // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      const hasWorkspaces = await fs.access(path.join(currentDir, 'package.json'))
        .then(async () => {
          const pkg = JSON.parse(await fs.readFile(path.join(currentDir, 'package.json'), 'utf-8'));
          return pkg.workspaces || pkg.packages;
        })
        .catch(() => false);
      
      // –ò–ª–∏ –∏—â–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ —Å package.json
      const packageDirs = [];
      for (const file of files) {
        if (file.startsWith('.') || file === 'node_modules' || file === 'dist' || file === 'build') {
          continue;
        }
        try {
          const filePath = path.join(currentDir, file);
          const stat = await fs.stat(filePath);
          if (stat.isDirectory()) {
            const packageJsonPath = path.join(filePath, 'package.json');
            try {
              await fs.access(packageJsonPath);
              packageDirs.push(file);
            } catch {
              // package.json –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
          }
        } catch {
          // –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        }
      }
      
      if (hasWorkspaces || packageDirs.length >= 2) {
        return currentDir;
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    }
    currentDir = path.dirname(currentDir);
    levelsUp++;
  }
  
  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
 */
async function getDynamicPackages(projectRoot: string): Promise<string[]> {
  const packages: string[] = [];
  
  try {
    const dirs = await fs.readdir(projectRoot);
    
    // –ò—â–µ–º –ª—é–±—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å package.json
    for (const dir of dirs) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (dir.startsWith('.') || dir === 'node_modules' || dir === 'dist' || dir === 'build') {
        continue;
      }
      
      const dirPath = path.join(projectRoot, dir);
      const stat = await fs.stat(dirPath);
      if (stat.isDirectory()) {
        const packageJsonPath = path.join(dirPath, 'package.json');
        try {
          await fs.access(packageJsonPath);
          packages.push(dir);
        } catch {
          // package.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
      }
    }
  } catch (error) {
    console.warn(chalk.yellow('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤'));
  }
  
  return packages;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è code2prompt –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
 */
function buildCode2PromptArgs(
  projectRoot: string,
  profile: ExportProfile,
  outputFile: string,
  dynamicPackages: string[],
  additionalExcludes: string[] = []
): string[] {
  const args = [projectRoot, '--no-clipboard', '-O', outputFile];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  for (const exclude of COMMON_EXCLUDES) {
    args.push('-e', exclude);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .exportignore
  for (const exclude of additionalExcludes) {
    args.push('-e', exclude);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è
  switch (profile) {
    case 'general':
      // –í–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–∞–∫–µ—Ç—ã
      args.push('-i', 'package.json');
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
      for (const pkg of dynamicPackages) {
        args.push('-i', `${pkg}/package.json`, '-i', `${pkg}/src`);
      }
      args.push('-e', '.github');
      break;
    case 'docs':
      args.push(
        '-i', 'docs'
      );
      break;
    case 'build':
      args.push(
        '-i', 'package.json', '-i', 'turbo.json',
        '-i', '.github', '-i', 'scripts',
        '-i', 'tsconfig.json'
      );
      break;
    case 'tests':
      args.push(
        '-i', 'tests', '-i', '__tests__', '-i', 'spec'
      );
      break;
    case 'all':
      // –î–ª—è 'all' –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è - –±–µ—Ä–µ–º –≤—Å–µ
      break;
    default:
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–∞–∫–µ—Ç–æ–º
      if (dynamicPackages.includes(profile)) {
        args.push('-i', profile);
      } else {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${profile}`);
      }
  }
  
  return args;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
 */
async function exportDocumentation(options: {
  projectRoot: string;
  outputFile: string;
  force?: boolean;
}): Promise<void> {
  const { projectRoot, outputFile, force = false } = options;
  
  console.log(chalk.blue('üìö –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...'));
  console.log(chalk.gray(`–ü—Ä–æ–µ–∫—Ç: ${projectRoot}`));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω–µ force)
  if (!force) {
    try {
      await fs.access(outputFile);
      console.log(chalk.yellow(`–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.`));
      return;
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
  }
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
  const args = [
    '.',
    '--no-clipboard',
    '-O', outputFile
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const potentialFiles = ['README.md', 'CLAUDE.md', 'CHANGELOG.md', 'CONTRIBUTING.md', 'LICENSE.md', 'LICENSE'];
  const potentialDirs = ['docs', 'src/docs', 'documentation', 'doc'];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
  for (const include of potentialFiles) {
    try {
      const includePath = path.join(projectRoot, include);
      await fs.access(includePath);
      args.push('-i', include);
      console.log(chalk.gray(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: ${include}`));
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ —Å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
  for (const dir of potentialDirs) {
    try {
      const dirPath = path.join(projectRoot, dir);
      const stat = await fs.stat(dirPath);
      if (stat.isDirectory()) {
        args.push('-i', `${dir}/**/*`);
        console.log(chalk.gray(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: ${dir}/**/*`));
      }
    } catch {
      // –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }
  }
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
  const excludes = ['node_modules', 'dist', '.git', 'src/cli.ts', 'src/commands', 'src/__tests__', 'templates'];
  for (const exclude of excludes) {
    args.push('-e', exclude);
  }
  
  console.log(chalk.gray(`–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...`));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º code2prompt –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
  const originalCwd = process.cwd();
  process.chdir(projectRoot);
  
  try {
    await runCode2Prompt(args);
  } finally {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    process.chdir(originalCwd);
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  const tokens = await estimateTokens(outputFile);
  
  console.log(chalk.green('‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'));
  console.log(chalk.blue('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:'));
  console.log(`   –†–∞–∑–º–µ—Ä: ~${tokens}k —Ç–æ–∫–µ–Ω–æ–≤`);
  console.log(`   –§–∞–π–ª: ${outputFile}`);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç code2prompt —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
 */
async function runCode2Prompt(args: string[]): Promise<void> {
  return new Promise((resolve, reject) => {
    const command = getCode2PromptCommand();
    console.log(chalk.gray(`–ó–∞–ø—É—Å–∫: ${command} ${args.join(' ')}`));
    
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "npx code2prompt"), —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë
    let spawnCommand: string;
    let spawnArgs: string[];
    
    if (command.includes(' ')) {
      const parts = command.split(' ');
      spawnCommand = parts[0]; // 'npx' –∏–ª–∏ 'node'
      spawnArgs = [...parts.slice(1), ...args]; // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã + –Ω–∞—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    } else {
      spawnCommand = command;
      spawnArgs = args;
    }
    
    const child = spawn(spawnCommand, spawnArgs, { 
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: true
    });
    
    let stdout = '';
    let stderr = '';
    
    child.stdout.on('data', (data) => {
      stdout += data.toString();
    });
    
    child.stderr.on('data', (data) => {
      stderr += data.toString();
    });
    
    child.on('close', (code) => {
      if (code === 0) {
        console.log(chalk.green('‚úÖ code2prompt –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'));
        resolve();
      } else {
        console.log(chalk.red(`‚ùå code2prompt –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        if (stderr) {
          console.log(chalk.gray(`–û—à–∏–±–∫–∞: ${stderr.trim()}`));
        }
        reject(new Error(`code2prompt –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
      }
    });
    
    child.on('error', (error) => {
      console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ code2prompt: ${error.message}`));
      reject(error);
    });
  });
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª–µ
 */
async function estimateTokens(filePath: string): Promise<number> {
  try {
    const content = await fs.readFile(filePath, 'utf-8');
    const words = content.split(/\s+/).length;
    return Math.ceil(words / 1000); // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤ —Ç—ã—Å—è—á–∞—Ö
  } catch {
    return 0;
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç (–Ω–µ Super App)
 */
async function exportCurrentProject(options: {
  output?: string;
  force?: boolean;
}): Promise<string> {
  const { output, force = false } = options;
  
  console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...'));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ code2prompt
  const hasCode2Prompt = await checkCode2Prompt();
  if (!hasCode2Prompt) {
    console.log(chalk.yellow('\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ code2prompt:'));
    console.log(chalk.gray('   –í —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: npm install code2prompt'));
    console.log(chalk.gray('   –ì–ª–æ–±–∞–ª—å–Ω–æ: npm install -g code2prompt'));
    throw new Error(
      'code2prompt –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ.'
    );
  }
  
  const projectRoot = process.cwd();
  console.log(chalk.gray(`–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: ${projectRoot}`));
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportDir = path.join(projectRoot, '.neira', 'export_code');
  const datePrefix = new Date().toISOString().slice(0, 10).replace(/-/g, '-');
  const timePrefix = new Date().toTimeString().slice(0, 5).replace(':', '');
  
  const versionDir = path.join(exportDir, datePrefix, `v${timePrefix}`);
  await fs.mkdir(versionDir, { recursive: true });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const projectName = path.basename(projectRoot);
  const outputFileName = output || `v${timePrefix}-${datePrefix}-${projectName}.txt`;
  const outputFile = path.join(versionDir, outputFileName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω–µ force)
  if (!force) {
    try {
      await fs.access(outputFile);
      console.log(chalk.yellow(`–§–∞–π–ª ${outputFileName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.`));
      return outputFile;
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
  }
  
  // –ß–∏—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .exportignore
  const additionalExcludes = await readExportIgnore(projectRoot);
  
  console.log(chalk.blue('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:'));
  console.log(`   –ü—Ä–æ–µ–∫—Ç: ${projectName}`);
  console.log(`   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputFile}`);
  if (additionalExcludes.length > 0) {
    console.log(`   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${additionalExcludes.length} –ø—Ä–∞–≤–∏–ª –∏–∑ .exportignore`);
  }
  console.log('----------------------------------------');
  
  // –°—Ç—Ä–æ–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è code2prompt (—É–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π basicExcludes)
  
  const args = [
    '.', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    '--no-clipboard',
    '-O', outputFile
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è + –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  const criticalExcludes = [
    'node_modules',
    'dist',
    '.git'
  ];
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–µ
  const docExcludes = [
    'docs',
    'documentation',
    'templates'
  ];
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ .md –∏ .mmd —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—Å —É—á—ë—Ç–æ–º .exportignore)
  try {
    const { glob } = await import('glob');
    
    // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è glob
    const ignorePatterns = [
      ...criticalExcludes.map(p => `**/${p}/**`),
      ...additionalExcludes.map(p => p.includes('**') ? p : `**/${p}/**`)
    ];
    
    const mdFiles = await glob('**/*.md', { 
      cwd: projectRoot,
      ignore: ignorePatterns
    });
    const mmdFiles = await glob('**/*.mmd', { 
      cwd: projectRoot,
      ignore: ignorePatterns
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º
    for (const file of [...mdFiles, ...mmdFiles]) {
      docExcludes.push(file);
    }
  } catch (error) {
    // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ glob –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    docExcludes.push('README.md', 'CLAUDE.md', 'src/docs/diagram.mmd');
  }
  
  for (const exclude of criticalExcludes) {
    args.push('-e', exclude);
  }
  
  for (const exclude of docExcludes) {
    args.push('-e', exclude);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .exportignore
  for (const exclude of additionalExcludes) {
    args.push('-e', exclude);
  }
  
  console.log(chalk.blue('‚öôÔ∏è  –ó–∞–ø—É—Å–∫ code2prompt...'));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º code2prompt
  await runCode2Prompt(args);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  const tokens = await estimateTokens(outputFile);
  
  console.log(chalk.green('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'));
  console.log(chalk.blue('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:'));
  console.log(`   –†–∞–∑–º–µ—Ä: ~${tokens}k —Ç–æ–∫–µ–Ω–æ–≤`);
  console.log(`   –§–∞–π–ª: ${outputFile}`);
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const docFileName = outputFileName.replace('.txt', '-docs.txt');
  const docOutputFile = path.join(versionDir, docFileName);
  
  await exportDocumentation({
    projectRoot: process.cwd(),
    outputFile: docOutputFile,
    force
  });
  
  return outputFile;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞
 */
export async function exportCode(options: {
  profile: ExportProfile;
  output?: string;
  force?: boolean;
  forceCurrentProject?: boolean;
}): Promise<string | void> {
  const { profile, output, force = false, forceCurrentProject = false } = options;
  
  console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞...'));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ code2prompt
  const hasCode2Prompt = await checkCode2Prompt();
  if (!hasCode2Prompt) {
    console.log(chalk.yellow('\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ code2prompt:'));
    console.log(chalk.gray('   –í —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: npm install code2prompt'));
    console.log(chalk.gray('   –ì–ª–æ–±–∞–ª—å–Ω–æ: npm install -g code2prompt'));
    throw new Error(
      'code2prompt –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ.'
    );
  }
  
  // –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  if (forceCurrentProject) {
    console.log(chalk.gray('üìÅ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞'));
    const exportFilePath = await exportCurrentProject({ output, force });
    return exportFilePath;
  }
  
  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  const monorepoRoot = await findMonorepoRoot();
  if (!monorepoRoot) {
    // –ï—Å–ª–∏ –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
    console.log(chalk.gray('üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç'));
    const exportFilePath = await exportCurrentProject({ output, force });
    return exportFilePath;
  }
  
  console.log(chalk.gray(`üìÅ –ù–∞–π–¥–µ–Ω –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${monorepoRoot}`));
  const projectRoot = monorepoRoot;
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
  const dynamicPackages = await getDynamicPackages(projectRoot);
  
  // –ß–∏—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .exportignore
  const additionalExcludes = await readExportIgnore(projectRoot);
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportDir = path.join(projectRoot, '.neira', 'export_code');
  const datePrefix = new Date().toISOString().slice(0, 10).replace(/-/g, '-');
  const timePrefix = new Date().toTimeString().slice(0, 5).replace(':', '');
  
  const versionDir = path.join(exportDir, datePrefix, `v${timePrefix}`);
  await fs.mkdir(versionDir, { recursive: true });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const projectName = path.basename(projectRoot);
  const outputFileName = output || `v${timePrefix}-${datePrefix}-${profile}-${projectName}.txt`;
  const outputFile = path.join(versionDir, outputFileName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω–µ force)
  if (!force) {
    try {
      await fs.access(outputFile);
      console.log(chalk.yellow(`–§–∞–π–ª ${outputFileName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.`));
      return outputFile;
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
  }
  
  console.log(chalk.blue('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:'));
  console.log(`   –ü—Ä–æ—Ñ–∏–ª—å: ${profile}`);
  console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${EXPORT_PROFILES[profile] || '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–∞–∫–µ—Ç'}`);
  console.log(`   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputFile}`);
  if (additionalExcludes.length > 0) {
    console.log(`   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${additionalExcludes.length} –ø—Ä–∞–≤–∏–ª –∏–∑ .exportignore`);
  }
  console.log('----------------------------------------');
  
  // –°—Ç—Ä–æ–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è code2prompt
  const args = buildCode2PromptArgs(projectRoot, profile, outputFile, dynamicPackages, additionalExcludes);
  
  console.log(chalk.blue('‚öôÔ∏è  –ó–∞–ø—É—Å–∫ code2prompt...'));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º code2prompt
  await runCode2Prompt(args);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  const tokens = await estimateTokens(outputFile);
  
  console.log(chalk.green('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'));
  console.log(chalk.blue('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:'));
  console.log(`   –†–∞–∑–º–µ—Ä: ~${tokens}k —Ç–æ–∫–µ–Ω–æ–≤`);
  console.log(`   –§–∞–π–ª: ${outputFile}`);
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const docFileName = outputFileName.replace('.txt', '-docs.txt');
  const docOutputFile = path.join(versionDir, docFileName);
  
  await exportDocumentation({
    projectRoot: process.cwd(),
    outputFile: docOutputFile,
    force
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  if (profile === 'general') {
    console.log(chalk.gray('\nüí° –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
    for (const pkg of dynamicPackages) {
      console.log(chalk.gray(`   neira-cli-mcp export ${pkg}`));
    }
  }
  
  return outputFile;
} 