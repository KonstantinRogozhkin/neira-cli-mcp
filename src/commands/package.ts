import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';

export async function packageApp() {
  console.log(chalk.blue('üì¶ –£–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'));

  const manifestPath = path.join(process.cwd(), 'neira-app.json');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
  if (!fs.existsSync(manifestPath)) {
    throw new Error('–§–∞–π–ª neira-app.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
  }

  let manifest;
  try {
    manifest = await fs.readJson(manifestPath);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è neira-app.json: ${error}`);
  }

  const appName = manifest.name;
  if (!appName) {
    throw new Error('–ü–æ–ª–µ "name" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ neira-app.json');
  }

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
  const buildDir = path.join(process.cwd(), 'build');
  await fs.ensureDir(buildDir);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const distDir = path.join(process.cwd(), 'dist');
  if (!fs.existsSync(distDir)) {
    console.log(chalk.yellow('‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É...'));
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–±–æ—Ä–∫—É, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    throw new Error('–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: npm run build');
  }

  console.log(chalk.gray('üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...'));

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–∞
  const tempDir = path.join(buildDir, 'temp');
  await fs.ensureDir(tempDir);

  // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
  await fs.copy(distDir, path.join(tempDir, 'dist'));
  await fs.copy(manifestPath, path.join(tempDir, 'neira-app.json'));

  // –ö–æ–ø–∏—Ä—É–µ–º package.json –µ—Å–ª–∏ –µ—Å—Ç—å
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (fs.existsSync(packageJsonPath)) {
    await fs.copy(packageJsonPath, path.join(tempDir, 'package.json'));
  }

  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
  if (manifest.icon) {
    const iconPath = path.join(process.cwd(), manifest.icon);
    if (fs.existsSync(iconPath)) {
      await fs.copy(iconPath, path.join(tempDir, manifest.icon));
    }
  }

  // –ö–æ–ø–∏—Ä—É–µ–º README –µ—Å–ª–∏ –µ—Å—Ç—å
  const readmePath = path.join(process.cwd(), 'README.md');
  if (fs.existsSync(readmePath)) {
    await fs.copy(readmePath, path.join(tempDir, 'README.md'));
  }

  console.log(chalk.gray('üóúÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...'));

  // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è .npx —Ñ–∞–π–ª–∞
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
  const packagePath = path.join(buildDir, `${appName}.npx`);
  
  // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
  const packageMeta = {
    name: appName,
    version: manifest.version,
    description: manifest.description,
    author: manifest.author,
    created: new Date().toISOString(),
    files: await getFileList(tempDir),
    checksum: 'dev-build-' + Date.now() // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
  };

  await fs.writeJson(path.join(tempDir, 'package-meta.json'), packageMeta, { spaces: 2 });

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ .npx —Ñ–∞–π–ª–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª –±—ã –∞—Ä—Ö–∏–≤)
  await fs.writeJson(packagePath, {
    meta: packageMeta,
    note: '–≠—Ç–æ dev-–≤–µ—Ä—Å–∏—è .npx —Ñ–∞–π–ª–∞. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–∏–Ω–∞—Ä–Ω—ã–π –∞—Ä—Ö–∏–≤.'
  }, { spaces: 2 });

  // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  await fs.remove(tempDir);

  console.log(chalk.green(`‚úÖ –ü–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${packagePath}`));
  console.log(chalk.gray(''));
  console.log(chalk.blue('–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:'));
  console.log(chalk.gray('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ'));
  console.log(chalk.gray('2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑ –≤ –≤–∞—à–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏'));
  console.log(chalk.gray('3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ .npx —Ñ–∞–π–ª –≤ —Ä–µ–ª–∏–∑'));
  console.log(chalk.gray('4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PR –≤ neira-apps'));
}

async function getFileList(dir: string): Promise<string[]> {
  const files: string[] = [];
  
  async function scan(currentDir: string, relativePath: string = '') {
    const items = await fs.readdir(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const relativeItemPath = path.join(relativePath, item);
      
      const stat = await fs.stat(fullPath);
      if (stat.isDirectory()) {
        await scan(fullPath, relativeItemPath);
      } else {
        files.push(relativeItemPath);
      }
    }
  }
  
  await scan(dir);
  return files;
} 