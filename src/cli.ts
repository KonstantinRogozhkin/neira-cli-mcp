import { Command } from 'commander';
import chalk from 'chalk';
import { createApp } from './commands/create';
import { devServer } from './commands/dev';
import { validateApp } from './commands/validate';
import { packageApp } from './commands/package';
import { exportCode, EXPORT_PROFILES } from './commands/export';

const program = new Command();

program
  .name('neira-cli-mcp')
  .description('CLI –∏ MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π NEIRA')
  .version('0.3.0');

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
program
  .command('create <app-name>')
  .description('–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NEIRA')
  .option('-d, --description <description>', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
  .action(async (appName: string, options) => {
    try {
      await createApp(appName, options);
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ dev-—Å–µ—Ä–≤–µ—Ä–∞
program
  .command('dev')
  .description('–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
  .option('-p, --port <port>', '–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞', '4242')
  .action(async (options) => {
    try {
      await devServer(parseInt(options.port));
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ dev-—Å–µ—Ä–≤–µ—Ä–∞:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
program
  .command('validate')
  .description('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç neira-app.json –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å')
  .action(async () => {
    try {
      await validateApp();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ —É–ø–∞–∫–æ–≤–∫–∏
program
  .command('package')
  .description('–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ .npx –ø–∞–∫–µ—Ç')
  .action(async () => {
    try {
      await packageApp();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞
program
  .command('export [profile]')
  .description('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –≤ markdown —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
  .option('-o, --output <filename>', '–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
  .option('-f, --force', '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª')
  .option('--list-profiles', '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏')
  .action(async (profile: string, options) => {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
      if (options.listProfiles) {
        console.log(chalk.blue('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:'));
        console.log('');
        for (const [key, description] of Object.entries(EXPORT_PROFILES)) {
          console.log(`  ${chalk.cyan(key.padEnd(12))} ${description}`);
        }
        console.log('');
        console.log(chalk.gray('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: neira-cli-mcp export <profile>'));
        console.log(chalk.gray('   –ü—Ä–∏–º–µ—Ä: neira-cli-mcp export general'));
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'general' –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const selectedProfile = profile || 'general';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
      if (!EXPORT_PROFILES[selectedProfile as keyof typeof EXPORT_PROFILES]) {
        console.error(chalk.red(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${selectedProfile}`));
        console.log(chalk.gray('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list-profiles –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π'));
        process.exit(1);
      }
      
      await exportCode({
        profile: selectedProfile as keyof typeof EXPORT_PROFILES,
        output: options.output,
        force: options.force
      });
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:'), error);
      process.exit(1);
    }
  });

program.parse(); 