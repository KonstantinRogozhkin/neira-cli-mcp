import { Command } from 'commander';
import chalk from 'chalk';
import path from 'path';
import { createApp } from './commands/create';
import { devServer } from './commands/dev';
import { validateApp } from './commands/validate';
import { exportCode, EXPORT_PROFILES } from './commands/export';
import { generateRepositoryMap } from './commands/map';

const program = new Command();

program
  .name('neira-cli-mcp')
  .description('CLI –∏ MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π NEIRA')
  .version('0.3.9');

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
program
  .command('create <app-name>')
  .description('–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NEIRA')
  .option('-d, --description <description>', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
  .action(async (appName: string, options) => {
    try {
      await createApp(appName, options);
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ MCP dev-—Å–µ—Ä–≤–µ—Ä–∞
program
  .command('dev')
  .description('–ó–∞–ø—É—Å–∫–∞–µ—Ç MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ NEIRA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π')
  .action(async () => {
    try {
      await devServer();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MCP —Å–µ—Ä–≤–µ—Ä–∞:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
program
  .command('validate')
  .description('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç neira-app.json –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å')
  .action(async () => {
    try {
      await validateApp();
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:'), error);
      process.exit(1);
    }
  });


// –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞
program
  .command('export [path-or-profile]')
  .description('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –≤ markdown —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
  .option('-o, --output <filename>', '–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
  .option('-f, --force', '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª')
  .option('--list-profiles', '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏')
  .action(async (pathOrProfile: string, options) => {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
      if (options.listProfiles) {
        console.log(chalk.blue('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:'));
        console.log('');
        for (const [key, description] of Object.entries(EXPORT_PROFILES)) {
          console.log(`  ${chalk.cyan(key.padEnd(12))} ${description}`);
        }
        console.log('');
        console.log(chalk.gray('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: neira-cli-mcp export <profile>'));
        console.log(chalk.gray('   –ü—Ä–∏–º–µ—Ä: neira-cli-mcp export general'));
        console.log(chalk.gray('   –ü—Ä–∏–º–µ—Ä: neira-cli-mcp export . (—ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏)'));
        return;
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '.'), —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
      if (pathOrProfile === '.' || pathOrProfile === './' || pathOrProfile === process.cwd()) {
        console.log(chalk.blue('üöÄ –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...'));
        
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥
        const exportFilePath = await exportCode({
          profile: 'general',
          output: options.output,
          force: options.force
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ä—è–¥–æ–º —Å —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã–º —Ñ–∞–π–ª–æ–º
        console.log(chalk.blue('üó∫Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        let mapOutput = 'REPOSITORY_MAP.txt';
        if (exportFilePath) {
          const exportPath = exportFilePath;
          const dir = path.dirname(exportPath);
          const baseName = path.basename(exportPath, path.extname(exportPath));
          mapOutput = path.join(dir, `${baseName}_MAP.txt`);
        } else if (options.output) {
          const exportPath = options.output;
          const dir = path.dirname(exportPath);
          const baseName = path.basename(exportPath, path.extname(exportPath));
          mapOutput = path.join(dir, `${baseName}_MAP.txt`);
        }
        
        await generateRepositoryMap({
          output: mapOutput,
          force: options.force,
          include: ['**/*.ts', '**/*.tsx', '**/*.py', '**/*.js', '**/*.jsx'],
          exclude: ['**/node_modules/**', '**/dist/**', '**/.git/**', '**/__pycache__/**', '**/*.pyc', '**/build/**', '**/coverage/**']
        });
        
        console.log(chalk.green('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∫–∞—Ä—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!'));
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'general' –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const selectedProfile = pathOrProfile || 'general';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
      if (!EXPORT_PROFILES[selectedProfile as keyof typeof EXPORT_PROFILES]) {
        console.error(chalk.red(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${selectedProfile}`));
        console.log(chalk.gray('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list-profiles –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π'));
        console.log(chalk.gray('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ neira-cli-mcp export . –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏'));
        process.exit(1);
      }
      
      await exportCode({
        profile: selectedProfile as keyof typeof EXPORT_PROFILES,
        output: options.output,
        force: options.force
      });
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:'), error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
program
  .command('map')
  .description('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–π, –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π')
  .option('-o, --output <filename>', '–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: REPOSITORY_MAP.txt)')
  .option('-f, --force', '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª')
  .option('-i, --include <patterns>', '–í–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', '**/*.ts,**/*.tsx,**/*.py,**/*.js,**/*.jsx')
  .option('-e, --exclude <patterns>', '–ò—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', '**/node_modules/**,**/dist/**,**/.git/**,**/__pycache__/**,**/*.pyc')
  .action(async (options) => {
    try {
      const includePatterns = options.include ? options.include.split(',').map((p: string) => p.trim()) : ['**/*.ts', '**/*.tsx', '**/*.py', '**/*.js', '**/*.jsx'];
      const excludePatterns = options.exclude ? options.exclude.split(',').map((p: string) => p.trim()) : ['**/node_modules/**', '**/dist/**', '**/.git/**', '**/__pycache__/**', '**/*.pyc'];
      
      await generateRepositoryMap({
        output: options.output,
        force: options.force,
        include: includePatterns,
        exclude: excludePatterns
      });
    } catch (error) {
      console.error(chalk.red('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:'), error);
      process.exit(1);
    }
  });

program.parse(); 